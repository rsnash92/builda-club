'use client'

import Link from 'next/link'
import { Search, Flame, Gamepad2, Brain, Wrench, MessageCircle, DollarSign, PartyPopper, Heart, Users, Crown, TrendingUp, TrendingDown, ChevronDown, Clock, UserPlus, Hammer, Wrench as WrenchIcon } from 'lucide-react'
import { AppLayout } from './components/AppLayout'
import { useClubs } from '@/lib/hooks/useClubs'
import { useState } from 'react'

const filterOptions = [
  { id: 'newest', label: 'Newest', active: true },
  { id: 'trending', label: 'Trending', active: false },
  { id: 'volume', label: 'Volume', active: false },
  { id: 'ending', label: 'Ending', active: false },
  { id: 'open', label: 'Open', active: false, hasDropdown: true },
  { id: 'all-tokens', label: 'All Tokens', active: false, hasDropdown: true },
]

export default function Home() {
  const [searchQuery, setSearchQuery] = useState("")
  const [activeFilter, setActiveFilter] = useState('newest')

  // Use dynamic data instead of static
  const { clubs, loading, error } = useClubs({
    search: searchQuery || undefined,
    limit: 20
  })

  // Mock data for when Supabase is not configured
  const mockClubs = [
    {
      id: '1',
      name: 'Conclave (Elected)',
      description: 'Building the future of decentralized governance',
      category: 'crypto',
      token_symbol: 'ELECTED',
      thumbnail_url: null,
      market_cap: 2100000
    },
    {
      id: '2', 
      name: 'Nobody knows you\'re a cat (CAT)',
      description: 'Anonymous meme coin for cat lovers',
      category: 'fun',
      token_symbol: 'CAT',
      thumbnail_url: null,
      market_cap: 591400
    },
    {
      id: '3',
      name: 'Making Outrageous Gains (MOG)',
      description: 'Community-driven token for ambitious builders',
      category: 'crypto',
      token_symbol: 'MOG',
      thumbnail_url: null,
      market_cap: 3200000
    },
    {
      id: '4',
      name: 'MAGA Crusade (CRUSADE)',
      description: 'Political meme token with strong community',
      category: 'social',
      token_symbol: 'CRUSADE',
      thumbnail_url: null,
      market_cap: 1800000
    },
    {
      id: '5',
      name: 'Gangsta Sugar Glider (Jin)',
      description: 'Cute animal token with attitude',
      category: 'fun',
      token_symbol: 'JIN',
      thumbnail_url: null,
      market_cap: 890000
    },
    {
      id: '6',
      name: 'Mogdi (Mogdi)',
      description: 'Cool dog token with sunglasses',
      category: 'fun',
      token_symbol: 'MOGDI',
      thumbnail_url: null,
      market_cap: 1200000
    }
  ]

  // Use mock data if there's an error (Supabase not configured)
  const displayClubs = error ? mockClubs : clubs

  const formatVolume = (value: number) => {
    if (value >= 1000000) {
      return `$${(value / 1000000).toFixed(1)}M`
    } else if (value >= 1000) {
      return `$${(value / 1000).toFixed(1)}K`
    }
    return `$${value.toFixed(2)}`
  }

  const getClubThumbnail = (club: any) => {
    if (club.thumbnail_url) {
      return club.thumbnail_url
    }
    
    // Generate gradient based on category
    const gradients = {
      crypto: 'from-yellow-400 to-orange-500',
      gaming: 'from-green-400 to-blue-500',
      ai: 'from-blue-400 to-purple-500',
      utility: 'from-orange-400 to-red-500',
      social: 'from-pink-400 to-purple-500',
      fun: 'from-yellow-400 to-pink-500'
    }
    
    return `bg-gradient-to-br ${gradients[club.category as keyof typeof gradients] || 'from-violet-400 to-purple-500'}`
  }

  const getClubEmoji = (club: any) => {
    const emojis = {
      crypto: '₿',
      gaming: '🎮',
      ai: '🤖',
      utility: '🔧',
      social: '💬',
      fun: '🎉'
    }
    return emojis[club.category as keyof typeof emojis] || '🏗️'
  }

  const getBuildingStatus = (club: any) => {
    const buildingStatuses = {
      crypto: ['Building: DeFi protocol', 'Shipped: 2 dApps this month', 'Building: NFT marketplace'],
      gaming: ['Building: P2E game', 'Shipped: 3 game modes', 'Building: Metaverse world'],
      ai: ['Building: AI trading bot', 'Shipped: ML model v2.0', 'Building: Chat assistant'],
      utility: ['Building: Developer tools', 'Shipped: 5 APIs this week', 'Building: Analytics dashboard'],
      social: ['Building: Social platform', 'Shipped: 3 features', 'Building: Community hub'],
      fun: ['Building: Meme generator', 'Shipped: 10 templates', 'Building: NFT collection']
    }
    
    const statuses = buildingStatuses[club.category as keyof typeof buildingStatuses] || ['Building: Web3 project', 'Shipped: 2 features', 'Building: Community tools']
    return statuses[Math.floor(Math.random() * statuses.length)]
  }

  const getOnlineBuilders = () => {
    return Math.floor(Math.random() * 50) + 1 // 1-50 builders online
  }

  const getBuilderCount = (club: any) => {
    return Math.floor(Math.random() * 500) + 50 // 50-550 builders
  }

  const getEarningAmount = () => {
    return Math.floor(Math.random() * 5000) + 100 // 100-5100 $BUIDL/mo
  }

  return (
    <AppLayout pageTitle="Clubs">
      {/* Hero Banner */}
      <div className="p-6">
        <div className="relative bg-[#15161a] border border-orange-400/30 rounded-lg overflow-hidden">
          <div className="absolute inset-0 bg-gradient-to-r from-orange-500/5 via-transparent to-red-500/5"></div>
          <div className="absolute inset-0">
            <div className="absolute top-10 right-20 w-32 h-32 bg-orange-400/10 rounded-full blur-xl"></div>
            <div className="absolute bottom-10 left-20 w-24 h-24 bg-red-400/10 rounded-full blur-xl"></div>
            <div className="absolute top-1/2 right-1/3 w-16 h-16 bg-orange-300/10 rounded-full blur-lg"></div>
          </div>
          <div className="relative px-6 py-8">
            <div className="flex items-center justify-between">
              {/* Left side - Title and Logo */}
              <div className="flex items-center space-x-4">
                <h1 className="text-3xl font-bold text-white">
                  Build & collaborate <span className="text-gray-400">together</span>
                  <br />
                  <span className="text-gray-400">with</span>
                </h1>
                <div className="flex items-center space-x-1">
                  <div className="w-6 h-6 bg-gradient-to-r from-orange-400 to-red-500 rounded-full flex items-center justify-center">
                    <span className="text-white font-bold text-xs">⬧</span>
                  </div>
                  <span className="text-white font-semibold">builda.club</span>
                </div>
              </div>
              
              {/* Right side - Search */}
              <div className="flex items-center space-x-3">
                <div className="relative">
                  <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
                  <input
                    type="text"
                    placeholder="Search for club"
                    className="w-80 pl-10 pr-4 py-3 bg-[#202128] border border-[#24252a] rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-orange-500"
                  />
                </div>
                <button className="px-6 py-3 bg-orange-600 hover:bg-orange-700 text-white rounded-lg transition-colors font-medium">
                  Search
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
      
      <div className="px-6">
        {/* Now Trending Section */}
        <div className="mb-6">
          <div className="flex items-center justify-between mb-4">
            <div className="flex items-center space-x-2">
              <span className="text-lg">⚡</span>
              <h2 className="text-xl font-bold text-white">Now Trending</h2>
            </div>
            <div className="flex items-center space-x-2">
              <button className="p-2 text-gray-400 hover:text-white transition-colors">
                <ChevronDown className="h-4 w-4 rotate-90" />
              </button>
              <button className="p-2 text-gray-400 hover:text-white transition-colors">
                <ChevronDown className="h-4 w-4 -rotate-90" />
              </button>
            </div>
          </div>
          
          {/* Trending Cards Row */}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
            {displayClubs.slice(0, 3).map((club) => (
              <div key={club.id} className="pump-card">
                <div className="p-4">
                  <div className="flex items-start space-x-3 mb-3">
                    {club.thumbnail_url ? (
                      <img
                        src={club.thumbnail_url}
                        alt={club.name}
                        className="w-10 h-10 rounded-lg object-cover"
                      />
                    ) : (
                      <div className={`w-10 h-10 ${getClubThumbnail(club)} rounded-lg flex items-center justify-center`}>
                        <span className="text-lg">{getClubEmoji(club)}</span>
                      </div>
                    )}
                    <div className="flex-1 min-w-0">
                      <h3 className="text-white font-medium text-sm mb-1 truncate">
                        {club.name} ({club.token_symbol || 'CLUB'})
                      </h3>
                      <p className="text-gray-400 text-xs line-clamp-2">
                        {club.description || getBuildingStatus(club)}
                      </p>
                    </div>
                  </div>
                  <div className="flex items-center justify-between text-xs">
                    <span className="text-gray-400">replies: {Math.floor(Math.random() * 1000)}</span>
                    <span className="text-emerald-400 font-medium">market cap: {formatVolume(club.market_cap || Math.floor(Math.random() * 100000))}</span>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>

        {/* Filter Controls */}
        <div className="flex items-center justify-between mb-6">
          <div className="flex items-center space-x-6">
            <div className="flex items-center space-x-4">
              <button className="flex items-center space-x-2 px-4 py-2 rounded-lg bg-[#202128]/50 hover:bg-[#202128] transition-colors">
                <div className="w-3 h-3 bg-white rounded-full"></div>
                <span className="text-white text-sm">Show animations</span>
              </button>
              <button className="flex items-center space-x-2 px-4 py-2 rounded-lg bg-[#202128]/50 hover:bg-[#202128] transition-colors">
                <div className="w-3 h-3 bg-white rounded-full"></div>
                <span className="text-white text-sm">Include nsfw</span>
              </button>
            </div>
            
            {/* Filter Tags */}
            <div className="flex items-center space-x-2">
              <button className="px-3 py-1 rounded-full bg-[#202128] text-white text-sm hover:bg-[#202128]/80 transition-colors">
                🔥 Mog Mania
              </button>
              <button className="px-3 py-1 rounded-full bg-[#202128] text-white text-sm hover:bg-[#202128]/80 transition-colors">
                🤖 AI Revolution
              </button>
              <button className="px-3 py-1 rounded-full bg-[#202128] text-white text-sm hover:bg-[#202128]/80 transition-colors">
                🐱 Animal Identity
              </button>
            </div>
          </div>
        </div>

          {/* Loading State */}
          {loading && (
            <div className="flex justify-center items-center py-12">
              <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-emerald-600"></div>
            </div>
          )}

          {/* Error State */}
          {error && (
            <div className="text-center py-8 mb-6">
              <div className="bg-[#202128] border border-[#24252a] rounded-lg p-6 max-w-md mx-auto">
                <p className="text-yellow-400 mb-4">⚠️ Supabase not configured</p>
                <p className="text-gray-400 text-sm mb-4">
                  The app is using mock data. To connect to a real database, set up Supabase environment variables.
                </p>
                <div className="space-y-2 text-xs text-gray-500">
                  <p>1. Copy env.example to .env.local</p>
                  <p>2. Add your Supabase credentials</p>
                  <p>3. Restart the dev server</p>
                </div>
              </div>
            </div>
          )}

        {/* Main Content Grid - Pump.fun style */}
        {(!loading || error) && (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {displayClubs.slice(3).map((club) => {
              const buildingStatus = getBuildingStatus(club)
              const replies = Math.floor(Math.random() * 1000)
              const marketCap = club.market_cap || Math.floor(Math.random() * 100000)
              const creatorId = Math.floor(Math.random() * 1000)
              const hoursAgo = Math.floor(Math.random() * 24)

              return (
                <div key={club.id} className="pump-card hover:shadow-lg transition-all hover:scale-[1.02] duration-200 overflow-hidden">
                  <div className="p-4">
                    {/* Avatar and Title */}
                    <div className="flex items-start space-x-3 mb-3">
                      {club.thumbnail_url ? (
                        <img
                          src={club.thumbnail_url}
                          alt={club.name}
                          className="w-12 h-12 rounded-lg object-cover"
                        />
                      ) : (
                        <div className={`w-12 h-12 ${getClubThumbnail(club)} rounded-lg flex items-center justify-center`}>
                          <span className="text-xl">{getClubEmoji(club)}</span>
                        </div>
                      )}
                      <div className="flex-1 min-w-0">
                        <h3 className="text-white font-medium text-sm mb-1 truncate">
                          {club.name} ({club.token_symbol || 'CLUB'})
                        </h3>
                        <p className="text-gray-400 text-xs line-clamp-2">
                          {club.description || buildingStatus}
                        </p>
                      </div>
                    </div>

                    {/* Creator Info */}
                    <div className="text-xs text-gray-400 mb-3">
                      <span>created by: </span>
                      <span className="text-blue-400">builder{creatorId}</span>
                      <span className="ml-2">({hoursAgo}h ago)</span>
                    </div>

                    {/* Stats */}
                    <div className="flex items-center justify-between text-xs">
                      <span className="text-gray-400">replies: {replies}</span>
                      <span className="text-emerald-400 font-medium">market cap: {formatVolume(marketCap)}</span>
                    </div>
                  </div>
                </div>
              )
            })}
          </div>
        )}

          {/* Empty State */}
          {!loading && !error && displayClubs.length === 0 && (
            <div className="text-center py-12">
            <p className="text-gray-400 mb-4">No trending tokens found</p>
              <Link
                href="/create-club"
              className="px-4 py-2 bg-orange-600 text-white rounded-lg hover:bg-orange-700"
              >
                Create new coin
              </Link>
            </div>
          )}
        </div>
      </div>
    </AppLayout>
  )
}
